version: '3.8'

services:
  # Web application
  web:
    build:
      context: .
      dockerfile: ./Dockerfile
    image: stickforstats-web:latest
    container_name: stickforstats-web
    restart: unless-stopped
    depends_on:
      - db
      - redis
    env_file:
      - ./.env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=stickforstats.settings
      - DJANGO_CONFIGURATION=Production
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DATABASE_NAME=${DB_NAME:-stickforstats}
      - DATABASE_USER=${DB_USER:-stickforstats_user}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ENABLE_WEBSOCKET_METRICS=True
      - RAG_CACHE_ENABLED=True
      - RAG_EMBEDDING_CACHE_TIMEOUT=604800
      - RAG_RETRIEVAL_CACHE_TIMEOUT=86400
      - RAG_QUERY_CACHE_TIMEOUT=10800
    volumes:
      - media_volume:/app/media
      - static_volume:/app/static
      - log_volume:/app/logs
      - data_volume:/app/data
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: gunicorn stickforstats.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120 --max-requests 1000 --max-requests-jitter 50

  # ASGI server for WebSockets
  asgi:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.asgi
    image: stickforstats-asgi:latest
    container_name: stickforstats-asgi
    restart: unless-stopped
    depends_on:
      - db
      - redis
    env_file:
      - ./.env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=stickforstats.settings
      - DJANGO_CONFIGURATION=Production
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DATABASE_NAME=${DB_NAME:-stickforstats}
      - DATABASE_USER=${DB_USER:-stickforstats_user}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ENABLE_WEBSOCKET_METRICS=True
      - RAG_CACHE_ENABLED=True
      - RAG_EMBEDDING_CACHE_TIMEOUT=604800
      - RAG_RETRIEVAL_CACHE_TIMEOUT=86400
      - RAG_QUERY_CACHE_TIMEOUT=10800
    volumes:
      - media_volume:/app/media
      - log_volume:/app/logs
    expose:
      - "8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: daphne -b 0.0.0.0 -p 8001 stickforstats.asgi:application

  # Celery worker for asynchronous tasks
  celery:
    build:
      context: .
      dockerfile: ./Dockerfile
    image: stickforstats-celery:latest
    container_name: stickforstats-celery
    restart: unless-stopped
    depends_on:
      - db
      - redis
    env_file:
      - ./.env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=stickforstats.settings
      - DJANGO_CONFIGURATION=Production
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DATABASE_NAME=${DB_NAME:-stickforstats}
      - DATABASE_USER=${DB_USER:-stickforstats_user}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ENABLE_WEBSOCKET_METRICS=True
      - RAG_CACHE_ENABLED=True
      - RAG_EMBEDDING_CACHE_TIMEOUT=604800
      - RAG_RETRIEVAL_CACHE_TIMEOUT=86400
      - RAG_QUERY_CACHE_TIMEOUT=10800
    volumes:
      - media_volume:/app/media
      - log_volume:/app/logs
    command: celery -A stickforstats worker -l INFO --concurrency=4

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: ./Dockerfile
    image: stickforstats-celery-beat:latest
    container_name: stickforstats-celery-beat
    restart: unless-stopped
    depends_on:
      - db
      - redis
      - celery
    env_file:
      - ./.env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=stickforstats.settings
      - DJANGO_CONFIGURATION=Production
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DATABASE_NAME=${DB_NAME:-stickforstats}
      - DATABASE_USER=${DB_USER:-stickforstats_user}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ENABLE_WEBSOCKET_METRICS=True
      - RAG_CACHE_ENABLED=True
      - RAG_EMBEDDING_CACHE_TIMEOUT=604800
      - RAG_RETRIEVAL_CACHE_TIMEOUT=86400
      - RAG_QUERY_CACHE_TIMEOUT=10800
    volumes:
      - log_volume:/app/logs
    command: celery -A stickforstats beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # Frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    image: stickforstats-frontend:latest
    container_name: stickforstats-frontend
    restart: unless-stopped
    depends_on:
      - web
      - asgi
    env_file:
      - ./frontend/.env.prod
    environment:
      - SERVER_NAME=${SERVER_NAME:-localhost}
      - API_URL=http://web:8000
      - WS_URL=http://asgi:8001
    expose:
      - "80"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Database with pgvector extension for RAG system
  db:
    image: ankane/pgvector:v0.5.0
    container_name: stickforstats-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-stickforstats_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME:-stickforstats}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-vector-db.sql:/docker-entrypoint-initdb.d/init-vector-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-stickforstats_user} -d ${DB_NAME:-stickforstats}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis for caching, Celery broker, Channels and RAG system
  redis:
    image: redis:7-alpine
    container_name: stickforstats-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx for serving static files and proxying
  nginx:
    image: nginx:1.25-alpine
    container_name: stickforstats-nginx
    restart: unless-stopped
    depends_on:
      - web
      - asgi
      - frontend
    volumes:
      - ./docker/nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    environment:
      - SERVER_NAME=${SERVER_NAME:-localhost}
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Certbot for Let's Encrypt SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: stickforstats-certbot
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${\!}; done;'"
    depends_on:
      - nginx

volumes:
  postgres_data:
  redis_data:
  media_volume:
  static_volume:
  log_volume:
  data_volume:
  certbot_data:
  certbot_www: