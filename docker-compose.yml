version: '3.8'

services:
  # Web application
  web:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    image: stickforstats-web
    container_name: stickforstats-web
    restart: unless-stopped
    depends_on:
      - db
      - redis
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/stickforstats
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    command: gunicorn stickforstats.wsgi:application --bind 0.0.0.0:8000 --workers 4

  # ASGI server for WebSockets
  asgi:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    image: stickforstats-asgi
    container_name: stickforstats-asgi
    restart: unless-stopped
    depends_on:
      - db
      - redis
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/stickforstats
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    ports:
      - "8001:8001"
    command: uvicorn stickforstats.asgi:application --host 0.0.0.0 --port 8001 --workers 4

  # Celery worker for asynchronous tasks
  celery:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    image: stickforstats-celery
    container_name: stickforstats-celery
    restart: unless-stopped
    depends_on:
      - db
      - redis
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/stickforstats
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    command: celery -A stickforstats worker -l INFO

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    image: stickforstats-celery-beat
    container_name: stickforstats-celery-beat
    restart: unless-stopped
    depends_on:
      - db
      - redis
      - celery
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/stickforstats
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    command: celery -A stickforstats beat -l INFO

  # Frontend development server (development only)
  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    image: stickforstats-frontend
    container_name: stickforstats-frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    command: npm start
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_WS_URL=ws://localhost:8001/ws

  # Database
  db:
    image: ankane/pgvector:v0.5.0
    container_name: stickforstats-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=stickforstats
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # Redis for caching, Celery broker, and Channels
  redis:
    image: redis:7-alpine
    container_name: stickforstats-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Nginx for serving static files and proxying
  nginx:
    image: nginx:1.25-alpine
    container_name: stickforstats-nginx
    restart: unless-stopped
    depends_on:
      - web
      - asgi
    volumes:
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
    ports:
      - "80:80"

volumes:
  postgres_data:
  redis_data: